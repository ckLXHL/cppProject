!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Condition	Condition.cpp	/^Condition::Condition(MutexLock &mutex)$/;"	f	class:Condition	signature:(MutexLock &mutex)
Condition::Condition	Condition.cpp	/^Condition::Condition(MutexLock &mutex)$/;"	f	class:Condition	signature:(MutexLock &mutex)
Condition::notify	Condition.cpp	/^void Condition::notify()$/;"	f	class:Condition	signature:()
Condition::notifyAll	Condition.cpp	/^void Condition::notifyAll()$/;"	f	class:Condition	signature:()
Condition::wait	Condition.cpp	/^void Condition::wait()$/;"	f	class:Condition	signature:()
Condition::~Condition	Condition.cpp	/^Condition::~Condition()$/;"	f	class:Condition	signature:()
ERR_EXIT	InetAddress.cpp	2;"	d	file:
ERR_EXIT	PollPoller.cpp	5;"	d	file:
ERR_EXIT	Rio.cpp	8;"	d	file:
ERR_EXIT	Socket.cpp	14;"	d	file:
ERR_EXIT	TcpConnection.cpp	3;"	d	file:
ERR_EXIT	TcpServer.cpp	8;"	d	file:
ERR_EXIT	Timer.cpp	8;"	d	file:
Exception	Exception.cpp	/^Exception::Exception(const char *s)$/;"	f	class:Exception	signature:(const char *s)
Exception	Exception.cpp	/^Exception::Exception(const std::string &s)$/;"	f	class:Exception	signature:(const std::string &s)
Exception::Exception	Exception.cpp	/^Exception::Exception(const char *s)$/;"	f	class:Exception	signature:(const char *s)
Exception::Exception	Exception.cpp	/^Exception::Exception(const std::string &s)$/;"	f	class:Exception	signature:(const std::string &s)
Exception::fillStackTrace	Exception.cpp	/^void Exception::fillStackTrace()$/;"	f	class:Exception	signature:()
Exception::stackTrace	Exception.cpp	/^const char *Exception::stackTrace() const throw()$/;"	f	class:Exception	signature:() const
Exception::what	Exception.cpp	/^const char *Exception::what() const throw()$/;"	f	class:Exception	signature:() const
Exception::~Exception	Exception.cpp	/^Exception::~Exception() throw()$/;"	f	class:Exception	signature:()
HandleRequest	correct.cpp	/^void correct::HandleRequest(const TcpConnectionPtr &conn, const std::string &st)$/;"	f	class:correct	signature:(const TcpConnectionPtr &conn, const std::string &st)
IgnoreSigpipe	TcpServer.cpp	/^        IgnoreSigpipe()$/;"	f	class:IgnoreSigpipe	access:public	signature:()
IgnoreSigpipe	TcpServer.cpp	/^class IgnoreSigpipe$/;"	c	file:
IgnoreSigpipe::IgnoreSigpipe	TcpServer.cpp	/^        IgnoreSigpipe()$/;"	f	class:IgnoreSigpipe	access:public	signature:()
InetAddress	InetAddress.cpp	/^InetAddress::InetAddress(const struct sockaddr_in &addr)$/;"	f	class:InetAddress	signature:(const struct sockaddr_in &addr)
InetAddress	InetAddress.cpp	/^InetAddress::InetAddress(uint16_t port)$/;"	f	class:InetAddress	signature:(uint16_t port)
InetAddress::InetAddress	InetAddress.cpp	/^InetAddress::InetAddress(const struct sockaddr_in &addr)$/;"	f	class:InetAddress	signature:(const struct sockaddr_in &addr)
InetAddress::InetAddress	InetAddress.cpp	/^InetAddress::InetAddress(uint16_t port)$/;"	f	class:InetAddress	signature:(uint16_t port)
InetAddress::getLocalAddress	InetAddress.cpp	/^InetAddress InetAddress::getLocalAddress(int sockfd)$/;"	f	class:InetAddress	signature:(int sockfd)
InetAddress::getPeerAddress	InetAddress.cpp	/^InetAddress InetAddress::getPeerAddress(int sockfd)$/;"	f	class:InetAddress	signature:(int sockfd)
InetAddress::toIp	InetAddress.cpp	/^std::string InetAddress::toIp() const$/;"	f	class:InetAddress	signature:() const
InetAddress::toPort	InetAddress.cpp	/^uint16_t InetAddress::toPort() const$/;"	f	class:InetAddress	signature:() const
PollPoller	PollPoller.cpp	/^PollPoller::PollPoller(int listenfd)$/;"	f	class:PollPoller	signature:(int listenfd)
PollPoller::PollPoller	PollPoller.cpp	/^PollPoller::PollPoller(int listenfd)$/;"	f	class:PollPoller	signature:(int listenfd)
PollPoller::handleAccept	PollPoller.cpp	/^void PollPoller::handleAccept()$/;"	f	class:PollPoller	signature:()
PollPoller::handleCloseEvent	PollPoller.cpp	/^void PollPoller::handleCloseEvent(int i)$/;"	f	class:PollPoller	signature:(int i)
PollPoller::handleConnectionEvent	PollPoller.cpp	/^void PollPoller::handleConnectionEvent(int peerfd)$/;"	f	class:PollPoller	signature:(int peerfd)
PollPoller::handleData	PollPoller.cpp	/^void PollPoller::handleData()$/;"	f	class:PollPoller	signature:()
PollPoller::handleMessageEvent	PollPoller.cpp	/^void PollPoller::handleMessageEvent(int peerfd)$/;"	f	class:PollPoller	signature:(int peerfd)
PollPoller::poll	PollPoller.cpp	/^void PollPoller::poll()$/;"	f	class:PollPoller	signature:()
PollPoller::~PollPoller	PollPoller.cpp	/^PollPoller::~PollPoller()$/;"	f	class:PollPoller	signature:()
Rio	Rio.cpp	/^Rio::Rio(int fd)$/;"	f	class:Rio	signature:(int fd)
Rio::Rio	Rio.cpp	/^Rio::Rio(int fd)$/;"	f	class:Rio	signature:(int fd)
Rio::read	Rio.cpp	/^ssize_t Rio::read(char *usrbuf, size_t n)$/;"	f	class:Rio	signature:(char *usrbuf, size_t n)
Rio::readline	Rio.cpp	/^ssize_t Rio::readline(char *usrbuf, size_t maxlen)$/;"	f	class:Rio	signature:(char *usrbuf, size_t maxlen)
Rio::readn	Rio.cpp	/^ssize_t Rio::readn(char *usrbuf, size_t n)$/;"	f	class:Rio	signature:(char *usrbuf, size_t n)
Rio::writen	Rio.cpp	/^ssize_t Rio::writen(const char *usrbuf, size_t n)$/;"	f	class:Rio	signature:(const char *usrbuf, size_t n)
Singleton	SingleTon.cpp	/^		Singleton() {};$/;"	f	class:Singleton	file:	access:private	signature:()
Singleton	SingleTon.cpp	/^		Singleton(const Singleton &);$/;"	p	class:Singleton	file:	access:private	signature:(const Singleton &)
Singleton	SingleTon.cpp	/^class Singleton {$/;"	c	file:
Singleton::Singleton	SingleTon.cpp	/^		Singleton() {};$/;"	f	class:Singleton	file:	access:private	signature:()
Singleton::Singleton	SingleTon.cpp	/^		Singleton(const Singleton &);$/;"	p	class:Singleton	file:	access:private	signature:(const Singleton &)
Singleton::destroyInstance	SingleTon.cpp	/^		static void destroyInstance() {$/;"	f	class:Singleton	access:public	signature:()
Singleton::getInstance	SingleTon.cpp	/^		static Singleton *getInstance() {$/;"	f	class:Singleton	access:public	signature:()
Singleton::initInstance	SingleTon.cpp	/^		static void initInstance() {$/;"	f	class:Singleton	access:public	signature:()
Singleton::once_	SingleTon.cpp	/^		static pthread_once_t once_;$/;"	m	class:Singleton	file:	access:private
Singleton::operator =	SingleTon.cpp	/^		void operator=(const Singleton &);$/;"	p	class:Singleton	file:	access:private	signature:(const Singleton &)
Singleton::pInstance_	SingleTon.cpp	/^		static Singleton *pInstance_;$/;"	m	class:Singleton	file:	access:private
Singleton::pInstance_	SingleTon.cpp	/^Singleton *Singleton::pInstance_ = NULL;$/;"	m	class:Singleton	file:
Socket	Socket.cpp	/^Socket::Socket(int sockfd)$/;"	f	class:Socket	signature:(int sockfd)
Socket::Socket	Socket.cpp	/^Socket::Socket(int sockfd)$/;"	f	class:Socket	signature:(int sockfd)
Socket::accept	Socket.cpp	/^int Socket::accept()$/;"	f	class:Socket	signature:()
Socket::bindAddress	Socket.cpp	/^void Socket::bindAddress(const InetAddress &addr)$/;"	f	class:Socket	signature:(const InetAddress &addr)
Socket::listen	Socket.cpp	/^void Socket::listen()$/;"	f	class:Socket	signature:()
Socket::setReusePort	Socket.cpp	/^void Socket::setReusePort()$/;"	f	class:Socket	signature:()
Socket::shutdownWrite	Socket.cpp	/^void Socket::shutdownWrite()$/;"	f	class:Socket	signature:()
Socket::~Socket	Socket.cpp	/^Socket::~Socket()$/;"	f	class:Socket	signature:()
TcpConnection	TcpConnection.cpp	/^TcpConnection::TcpConnection(int sockfd,$/;"	f	class:TcpConnection	signature:(int sockfd, const InetAddress &localAddr, const InetAddress &peerAddr)
TcpConnection::TcpConnection	TcpConnection.cpp	/^TcpConnection::TcpConnection(int sockfd,$/;"	f	class:TcpConnection	signature:(int sockfd, const InetAddress &localAddr, const InetAddress &peerAddr)
TcpConnection::handleClose	TcpConnection.cpp	/^void TcpConnection::handleClose()$/;"	f	class:TcpConnection	signature:()
TcpConnection::handleConnection	TcpConnection.cpp	/^void TcpConnection::handleConnection()$/;"	f	class:TcpConnection	signature:()
TcpConnection::handleMessage	TcpConnection.cpp	/^void TcpConnection::handleMessage()$/;"	f	class:TcpConnection	signature:()
TcpConnection::readLine	TcpConnection.cpp	/^ssize_t TcpConnection::readLine(char *usrbuf, size_t n)$/;"	f	class:TcpConnection	signature:(char *usrbuf, size_t n)
TcpConnection::readn	TcpConnection.cpp	/^ssize_t TcpConnection::readn(char *usrbuf, size_t n)$/;"	f	class:TcpConnection	signature:(char *usrbuf, size_t n)
TcpConnection::receive	TcpConnection.cpp	/^std::string TcpConnection::receive()$/;"	f	class:TcpConnection	signature:()
TcpConnection::send	TcpConnection.cpp	/^void TcpConnection::send(const std::string &s)$/;"	f	class:TcpConnection	signature:(const std::string &s)
TcpConnection::shutdown	TcpConnection.cpp	/^void TcpConnection::shutdown()$/;"	f	class:TcpConnection	signature:()
TcpConnection::writen	TcpConnection.cpp	/^ssize_t TcpConnection::writen(const char *usrbuf, size_t n)$/;"	f	class:TcpConnection	signature:(const char *usrbuf, size_t n)
TcpConnection::~TcpConnection	TcpConnection.cpp	/^TcpConnection::~TcpConnection()$/;"	f	class:TcpConnection	signature:()
TcpServer	TcpServer.cpp	/^TcpServer::TcpServer(const InetAddress &addr)$/;"	f	class:TcpServer	signature:(const InetAddress &addr)
TcpServer::TcpServer	TcpServer.cpp	/^TcpServer::TcpServer(const InetAddress &addr)$/;"	f	class:TcpServer	signature:(const InetAddress &addr)
TcpServer::start	TcpServer.cpp	/^void TcpServer::start()$/;"	f	class:TcpServer	signature:()
Text	Text.cpp	/^Text::Text(const std::string &str) {$/;"	f	class:Text	signature:(const std::string &str)
Text::Text	Text.cpp	/^Text::Text(const std::string &str) {$/;"	f	class:Text	signature:(const std::string &str)
Text::calLessRound	Text.cpp	/^int Text::calLessRound(const std::string &st1 ,const std::string &st2)$/;"	f	class:Text	signature:(const std::string &st1 ,const std::string &st2)
Text::calMatch	Text.cpp	/^std::string Text::calMatch(const std::string &str) $/;"	f	class:Text	signature:(const std::string &str)
Text::handleLine	Text.cpp	/^void Text::handleLine(std::string &str) const {$/;"	f	class:Text	signature:(std::string &str) const
Text::handleReference	Text.cpp	/^void Text::handleReference() $/;"	f	class:Text	signature:()
Text::print	Text.cpp	/^void Text::print() const{$/;"	f	class:Text	signature:() const
Text::readWord	Text.cpp	/^int Text::readWord(const string &st) {$/;"	f	class:Text	signature:(const string &st)
Text::writeToFile	Text.cpp	/^void Text::writeToFile()const$/;"	f	class:Text	signature:() const
Thread	Thread.cpp	/^Thread::Thread()$/;"	f	class:Thread	signature:()
Thread	Thread.cpp	/^Thread::Thread(const ThreadFunc &callback)$/;"	f	class:Thread	signature:(const ThreadFunc &callback)
Thread::Thread	Thread.cpp	/^Thread::Thread()$/;"	f	class:Thread	signature:()
Thread::Thread	Thread.cpp	/^Thread::Thread(const ThreadFunc &callback)$/;"	f	class:Thread	signature:(const ThreadFunc &callback)
Thread::join	Thread.cpp	/^void Thread::join()$/;"	f	class:Thread	signature:()
Thread::setCallback	Thread.cpp	/^void Thread::setCallback(const ThreadFunc &cb)$/;"	f	class:Thread	signature:(const ThreadFunc &cb)
Thread::start	Thread.cpp	/^void Thread::start()$/;"	f	class:Thread	signature:()
Thread::threadFunc	Thread.cpp	/^void *Thread::threadFunc(void *arg)$/;"	f	class:Thread	signature:(void *arg)
Thread::~Thread	Thread.cpp	/^Thread::~Thread()$/;"	f	class:Thread	signature:()
ThreadPool	ThreadPool.cpp	/^ThreadPool::ThreadPool(size_t queueSize, size_t poolSize)$/;"	f	class:ThreadPool	signature:(size_t queueSize, size_t poolSize)
ThreadPool::ThreadPool	ThreadPool.cpp	/^ThreadPool::ThreadPool(size_t queueSize, size_t poolSize)$/;"	f	class:ThreadPool	signature:(size_t queueSize, size_t poolSize)
ThreadPool::addTask	ThreadPool.cpp	/^void ThreadPool::addTask(const Task &task)$/;"	f	class:ThreadPool	signature:(const Task &task)
ThreadPool::getTask	ThreadPool.cpp	/^ThreadPool::Task ThreadPool::getTask()$/;"	f	class:ThreadPool	signature:()
ThreadPool::runInThread	ThreadPool.cpp	/^void ThreadPool::runInThread()$/;"	f	class:ThreadPool	signature:()
ThreadPool::start	ThreadPool.cpp	/^void ThreadPool::start()$/;"	f	class:ThreadPool	signature:()
ThreadPool::stop	ThreadPool.cpp	/^void ThreadPool::stop()$/;"	f	class:ThreadPool	signature:()
ThreadPool::~ThreadPool	ThreadPool.cpp	/^ThreadPool::~ThreadPool()$/;"	f	class:ThreadPool	signature:()
Timer	Timer.cpp	/^Timer::Timer()$/;"	f	class:Timer	signature:()
Timer::Timer	Timer.cpp	/^Timer::Timer()$/;"	f	class:Timer	signature:()
Timer::cancelTimer	Timer.cpp	/^void Timer::cancelTimer()$/;"	f	class:Timer	signature:()
Timer::runTimer	Timer.cpp	/^void Timer::runTimer()$/;"	f	class:Timer	signature:()
Timer::setTimer	Timer.cpp	/^void Timer::setTimer(int val, int interval)$/;"	f	class:Timer	signature:(int val, int interval)
Timer::setTimerCallback	Timer.cpp	/^void Timer::setTimerCallback(const TimeCallback &cb)$/;"	f	class:Timer	signature:(const TimeCallback &cb)
Timer::~Timer	Timer.cpp	/^Timer::~Timer()$/;"	f	class:Timer	signature:()
TimerThread::cancelTimerThread	TimerThread.cpp	/^void TimerThread::cancelTimerThread()$/;"	f	class:TimerThread	signature:()
TimerThread::setTimer	TimerThread.cpp	/^void TimerThread::setTimer(int value, int interval)$/;"	f	class:TimerThread	signature:(int value, int interval)
TimerThread::setTimerCallback	TimerThread.cpp	/^void TimerThread::setTimerCallback(const TimerCallback &cb)$/;"	f	class:TimerThread	signature:(const TimerCallback &cb)
TimerThread::startTimerThread	TimerThread.cpp	/^void TimerThread::startTimerThread()$/;"	f	class:TimerThread	signature:()
accept	Socket.cpp	/^int Socket::accept()$/;"	f	class:Socket	signature:()
addTask	ThreadPool.cpp	/^void ThreadPool::addTask(const Task &task)$/;"	f	class:ThreadPool	signature:(const Task &task)
bindAddress	Socket.cpp	/^void Socket::bindAddress(const InetAddress &addr)$/;"	f	class:Socket	signature:(const InetAddress &addr)
calLessRound	Text.cpp	/^int Text::calLessRound(const std::string &st1 ,const std::string &st2)$/;"	f	class:Text	signature:(const std::string &st1 ,const std::string &st2)
calMatch	Text.cpp	/^std::string Text::calMatch(const std::string &str) $/;"	f	class:Text	signature:(const std::string &str)
cancelTimer	Timer.cpp	/^void Timer::cancelTimer()$/;"	f	class:Timer	signature:()
cancelTimerThread	TimerThread.cpp	/^void TimerThread::cancelTimerThread()$/;"	f	class:TimerThread	signature:()
correct	correct.cpp	/^correct::correct():netAddress_(8989),$/;"	f	class:correct	signature:()
correct::HandleRequest	correct.cpp	/^void correct::HandleRequest(const TcpConnectionPtr &conn, const std::string &st)$/;"	f	class:correct	signature:(const TcpConnectionPtr &conn, const std::string &st)
correct::correct	correct.cpp	/^correct::correct():netAddress_(8989),$/;"	f	class:correct	signature:()
correct::onClose	correct.cpp	/^void correct::onClose(const TcpConnectionPtr&) $/;"	f	class:correct	signature:(const TcpConnectionPtr&)
correct::onConnection	correct.cpp	/^void correct::onConnection(const TcpConnectionPtr &conn)$/;"	f	class:correct	signature:(const TcpConnectionPtr &conn)
correct::onMessage	correct.cpp	/^void correct::onMessage(const TcpConnectionPtr &conn)$/;"	f	class:correct	signature:(const TcpConnectionPtr &conn)
correct::setFunc	correct.cpp	/^void correct::setFunc()$/;"	f	class:correct	signature:()
correct::start	correct.cpp	/^void correct::start()$/;"	f	class:correct	signature:()
destroyInstance	SingleTon.cpp	/^		static void destroyInstance() {$/;"	f	class:Singleton	access:public	signature:()
fillStackTrace	Exception.cpp	/^void Exception::fillStackTrace()$/;"	f	class:Exception	signature:()
getInstance	SingleTon.cpp	/^		static Singleton *getInstance() {$/;"	f	class:Singleton	access:public	signature:()
getLocalAddress	InetAddress.cpp	/^InetAddress InetAddress::getLocalAddress(int sockfd)$/;"	f	class:InetAddress	signature:(int sockfd)
getPeerAddress	InetAddress.cpp	/^InetAddress InetAddress::getPeerAddress(int sockfd)$/;"	f	class:InetAddress	signature:(int sockfd)
getTask	ThreadPool.cpp	/^ThreadPool::Task ThreadPool::getTask()$/;"	f	class:ThreadPool	signature:()
handleAccept	PollPoller.cpp	/^void PollPoller::handleAccept()$/;"	f	class:PollPoller	signature:()
handleClose	TcpConnection.cpp	/^void TcpConnection::handleClose()$/;"	f	class:TcpConnection	signature:()
handleCloseEvent	PollPoller.cpp	/^void PollPoller::handleCloseEvent(int i)$/;"	f	class:PollPoller	signature:(int i)
handleConnection	TcpConnection.cpp	/^void TcpConnection::handleConnection()$/;"	f	class:TcpConnection	signature:()
handleConnectionEvent	PollPoller.cpp	/^void PollPoller::handleConnectionEvent(int peerfd)$/;"	f	class:PollPoller	signature:(int peerfd)
handleData	PollPoller.cpp	/^void PollPoller::handleData()$/;"	f	class:PollPoller	signature:()
handleLine	Text.cpp	/^void Text::handleLine(std::string &str) const {$/;"	f	class:Text	signature:(std::string &str) const
handleMessage	TcpConnection.cpp	/^void TcpConnection::handleMessage()$/;"	f	class:TcpConnection	signature:()
handleMessageEvent	PollPoller.cpp	/^void PollPoller::handleMessageEvent(int peerfd)$/;"	f	class:PollPoller	signature:(int peerfd)
handleReference	Text.cpp	/^void Text::handleReference() $/;"	f	class:Text	signature:()
initInstance	SingleTon.cpp	/^		static void initInstance() {$/;"	f	class:Singleton	access:public	signature:()
initObj	TcpServer.cpp	/^IgnoreSigpipe initObj;  \/\/全局对象，系统初始化时必然处理SIGPIPE$/;"	v
join	Thread.cpp	/^void Thread::join()$/;"	f	class:Thread	signature:()
listen	Socket.cpp	/^void Socket::listen()$/;"	f	class:Socket	signature:()
main	Test.cpp	/^int main(int argc, const char *argv[])$/;"	f	signature:(int argc, const char *argv[])
notify	Condition.cpp	/^void Condition::notify()$/;"	f	class:Condition	signature:()
notifyAll	Condition.cpp	/^void Condition::notifyAll()$/;"	f	class:Condition	signature:()
onClose	correct.cpp	/^void correct::onClose(const TcpConnectionPtr&) $/;"	f	class:correct	signature:(const TcpConnectionPtr&)
onConnection	correct.cpp	/^void correct::onConnection(const TcpConnectionPtr &conn)$/;"	f	class:correct	signature:(const TcpConnectionPtr &conn)
onMessage	correct.cpp	/^void correct::onMessage(const TcpConnectionPtr &conn)$/;"	f	class:correct	signature:(const TcpConnectionPtr &conn)
once_	SingleTon.cpp	/^		static pthread_once_t once_;$/;"	m	class:Singleton	file:	access:private
operator =	SingleTon.cpp	/^		void operator=(const Singleton &);$/;"	p	class:Singleton	file:	access:private	signature:(const Singleton &)
pInstance_	SingleTon.cpp	/^		static Singleton *pInstance_;$/;"	m	class:Singleton	file:	access:private
pInstance_	SingleTon.cpp	/^Singleton *Singleton::pInstance_ = NULL;$/;"	m	class:Singleton	file:
poll	PollPoller.cpp	/^void PollPoller::poll()$/;"	f	class:PollPoller	signature:()
print	Text.cpp	/^void Text::print() const{$/;"	f	class:Text	signature:() const
read	Rio.cpp	/^ssize_t Rio::read(char *usrbuf, size_t n)$/;"	f	class:Rio	signature:(char *usrbuf, size_t n)
readLine	TcpConnection.cpp	/^ssize_t TcpConnection::readLine(char *usrbuf, size_t n)$/;"	f	class:TcpConnection	signature:(char *usrbuf, size_t n)
readWord	Text.cpp	/^int Text::readWord(const string &st) {$/;"	f	class:Text	signature:(const string &st)
readline	Rio.cpp	/^ssize_t Rio::readline(char *usrbuf, size_t maxlen)$/;"	f	class:Rio	signature:(char *usrbuf, size_t maxlen)
readn	Rio.cpp	/^ssize_t Rio::readn(char *usrbuf, size_t n)$/;"	f	class:Rio	signature:(char *usrbuf, size_t n)
readn	TcpConnection.cpp	/^ssize_t TcpConnection::readn(char *usrbuf, size_t n)$/;"	f	class:TcpConnection	signature:(char *usrbuf, size_t n)
receive	TcpConnection.cpp	/^std::string TcpConnection::receive()$/;"	f	class:TcpConnection	signature:()
runInThread	ThreadPool.cpp	/^void ThreadPool::runInThread()$/;"	f	class:ThreadPool	signature:()
runTimer	Timer.cpp	/^void Timer::runTimer()$/;"	f	class:Timer	signature:()
send	TcpConnection.cpp	/^void TcpConnection::send(const std::string &s)$/;"	f	class:TcpConnection	signature:(const std::string &s)
setCallback	Thread.cpp	/^void Thread::setCallback(const ThreadFunc &cb)$/;"	f	class:Thread	signature:(const ThreadFunc &cb)
setFunc	correct.cpp	/^void correct::setFunc()$/;"	f	class:correct	signature:()
setReusePort	Socket.cpp	/^void Socket::setReusePort()$/;"	f	class:Socket	signature:()
setTimer	Timer.cpp	/^void Timer::setTimer(int val, int interval)$/;"	f	class:Timer	signature:(int val, int interval)
setTimer	TimerThread.cpp	/^void TimerThread::setTimer(int value, int interval)$/;"	f	class:TimerThread	signature:(int value, int interval)
setTimerCallback	Timer.cpp	/^void Timer::setTimerCallback(const TimeCallback &cb)$/;"	f	class:Timer	signature:(const TimeCallback &cb)
setTimerCallback	TimerThread.cpp	/^void TimerThread::setTimerCallback(const TimerCallback &cb)$/;"	f	class:TimerThread	signature:(const TimerCallback &cb)
shutdown	TcpConnection.cpp	/^void TcpConnection::shutdown()$/;"	f	class:TcpConnection	signature:()
shutdownWrite	Socket.cpp	/^void Socket::shutdownWrite()$/;"	f	class:Socket	signature:()
stackTrace	Exception.cpp	/^const char *Exception::stackTrace() const throw()$/;"	f	class:Exception	signature:() const
start	TcpServer.cpp	/^void TcpServer::start()$/;"	f	class:TcpServer	signature:()
start	Thread.cpp	/^void Thread::start()$/;"	f	class:Thread	signature:()
start	ThreadPool.cpp	/^void ThreadPool::start()$/;"	f	class:ThreadPool	signature:()
start	correct.cpp	/^void correct::start()$/;"	f	class:correct	signature:()
startTimerThread	TimerThread.cpp	/^void TimerThread::startTimerThread()$/;"	f	class:TimerThread	signature:()
stop	ThreadPool.cpp	/^void ThreadPool::stop()$/;"	f	class:ThreadPool	signature:()
threadFunc	Thread.cpp	/^void *Thread::threadFunc(void *arg)$/;"	f	class:Thread	signature:(void *arg)
toIp	InetAddress.cpp	/^std::string InetAddress::toIp() const$/;"	f	class:InetAddress	signature:() const
toPort	InetAddress.cpp	/^uint16_t InetAddress::toPort() const$/;"	f	class:InetAddress	signature:() const
wait	Condition.cpp	/^void Condition::wait()$/;"	f	class:Condition	signature:()
what	Exception.cpp	/^const char *Exception::what() const throw()$/;"	f	class:Exception	signature:() const
writeToFile	Text.cpp	/^void Text::writeToFile()const$/;"	f	class:Text	signature:() const
writen	Rio.cpp	/^ssize_t Rio::writen(const char *usrbuf, size_t n)$/;"	f	class:Rio	signature:(const char *usrbuf, size_t n)
writen	TcpConnection.cpp	/^ssize_t TcpConnection::writen(const char *usrbuf, size_t n)$/;"	f	class:TcpConnection	signature:(const char *usrbuf, size_t n)
~Condition	Condition.cpp	/^Condition::~Condition()$/;"	f	class:Condition	signature:()
~Exception	Exception.cpp	/^Exception::~Exception() throw()$/;"	f	class:Exception	signature:()
~PollPoller	PollPoller.cpp	/^PollPoller::~PollPoller()$/;"	f	class:PollPoller	signature:()
~Socket	Socket.cpp	/^Socket::~Socket()$/;"	f	class:Socket	signature:()
~TcpConnection	TcpConnection.cpp	/^TcpConnection::~TcpConnection()$/;"	f	class:TcpConnection	signature:()
~Thread	Thread.cpp	/^Thread::~Thread()$/;"	f	class:Thread	signature:()
~ThreadPool	ThreadPool.cpp	/^ThreadPool::~ThreadPool()$/;"	f	class:ThreadPool	signature:()
~Timer	Timer.cpp	/^Timer::~Timer()$/;"	f	class:Timer	signature:()
